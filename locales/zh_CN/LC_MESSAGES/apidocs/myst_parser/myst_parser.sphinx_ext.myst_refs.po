# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Executable Book Project
# This file is distributed under the same license as the MyST Parser
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MyST Parser 4.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-26 16:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:2
msgid ":py:mod:`myst_parser.sphinx_ext.myst_refs`"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:2
msgid ""
"A post-transform for overriding the behaviour of sphinx reference "
"resolution."
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:4
msgid ""
"This is applied to MyST type references only, such as ``[text](target)``,"
" and allows for nested syntax"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:10
msgid "Module Contents"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:13
msgid "Classes"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:19
msgid ""
":py:obj:`MystReferenceResolver "
"<myst_parser.sphinx_ext.myst_refs.MystReferenceResolver>`"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:33
msgid "Resolves cross-references on doctrees."
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:24
msgid "Data"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:30
msgid ":py:obj:`LOGGER <myst_parser.sphinx_ext.myst_refs.LOGGER>`"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:35
msgid "API"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:46
msgid "Bases: :py:obj:`sphinx.transforms.post_transforms.ReferencesResolver`"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:35
msgid "Overrides default sphinx implementation, to allow for nested syntax"
msgstr ""

#: ../../apidocs/myst_parser/myst_parser.sphinx_ext.myst_refs.rst:51
msgid "Initialization"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:42
msgid "Initial setup for in-place document transforms."
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:41
msgid "Log a warning, with a myst type and specific subtype."
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:131
msgid ""
"Resolve a reference, from a markdown link, to another document, "
"optionally with a target id within that document."
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:187
msgid "Resolve reference generated by the \"myst\" role; ``[text](#reference)``."
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:189
msgid "This builds on the sphinx ``any`` role to also resolve:"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:191
msgid "Document references with extensions; ``[text](./doc.md)``"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:192
msgid "Document references with anchors with anchors; ``[text](./doc.md#target)``"
msgstr ""

#: ../../../myst_parser/sphinx_ext/myst_refs.py:193
msgid ""
"Nested syntax for explicit text with std:doc and std:ref; "
"``[**nested**](reference)``"
msgstr ""

